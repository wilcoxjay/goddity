from typing import Generic, TypeVar, Optional, Iterator, Iterable, Tuple, List, Any

V = TypeVar('V')

class DiGraph(Generic[V]):
    def __init__(self, g: Optional[DiGraph[V]]=None) -> None: ...

    def __contains__(self, v: V) -> bool: ...
    def __iter__(self) -> Iterator[V]: ...

    def add_node(self, v: V) -> None: ...
    def add_edge(self, v1: V, v2: V) -> None: ...

    def remove_node(self, v: V) -> None: ...

    def out_edges(self, bunch: Optional[Iterable[V]]=None) -> Iterable[Tuple[V, V]]: ...
    

def grid_graph(dim: List[int]) -> DiGraph[Any]: ...
